"""
Django settings for Boilerplate project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path
from datetime import timedelta
from decouple import config  

BASE_DIR = Path(__file__).resolve().parent.parent

# -----------------------------------------------------------------------------------------
# SECURITY CONFIGURATION - For production, ensure these are properly configured!
# -----------------------------------------------------------------------------------------

#! SECURITY WARNING: Keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-j*+m6g*!yy7hl!xx&w7@gyjhkxutl_5)3g=b90)%dc$#&mzpa)', cast=str)

#! SECURITY WARNING: Don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

#! SECURITY WARNING: Don't allow all hosts in production
ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='127.0.0.1, localhost:5173', cast=str).split(',')

# -----------------------------------------------------------------------------------------
#? APPLICATION CONFIGURATION
# -----------------------------------------------------------------------------------------

INSTALLED_APPS = [
    "jazzmin",  # Admin theme customizations
    "django.contrib.admin",  
    "django.contrib.auth",  
    "django.contrib.contenttypes",  
    "django.contrib.sessions",  
    "django.contrib.messages",  
    "django.contrib.staticfiles", 

    #? Your custom Django apps (Create these apps in the 'apps' folder) 
    #TODO: Change app name to apps.<app_name> in the apps.py file
    'apps.accounts',  # Custom app for user authentication
    'apps.core',  # Core functionalities (add more features as needed)
    'apps.payments',  # Handle payment system integration
    #? Add apps.<app_name>

    # Third-party apps
    'corsheaders',  # Cross-Origin Resource Sharing (CORS) to allow API requests from other domains
    'rest_framework',  # Django REST Framework for building APIs
    'rest_framework.authtoken',  # Token-based authentication
    'rest_framework_simplejwt',  # JSON Web Token (JWT) authentication
    'allauth',  # Authentication handler for login/signup
    'allauth.account',  # Account management via allauth
    'allauth.socialaccount.providers.google',  # Google social authentication
    'allauth.socialaccount',  # Social account management
    'dj_rest_auth',  # REST API endpoints for authentication
    'dj_rest_auth.registration',  # Registration endpoints for dj_rest_auth
    'social_django',  # Django OAuth authentication
    'django_filters',  # Django filter integration for API queries
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # Enable CORS headers
    "django.middleware.security.SecurityMiddleware",  # Security middleware
    "django.contrib.sessions.middleware.SessionMiddleware",  # Session handling
    "django.middleware.common.CommonMiddleware",  # Common middleware (caching, etc.)
    "django.middleware.csrf.CsrfViewMiddleware",  # CSRF protection
    "django.contrib.auth.middleware.AuthenticationMiddleware",  # Authentication middleware
    "django.contrib.messages.middleware.MessageMiddleware",  # Messaging middleware
    "django.middleware.clickjacking.XFrameOptionsMiddleware",  # Clickjacking protection
]

ROOT_URLCONF = "Boilerplate.urls"  

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates", 
        "DIRS": [os.path.join(BASE_DIR, "templates")],  # Directories to search for templates 
        "APP_DIRS": True,  # Automatically look for templates in app directories
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",  
                "django.template.context_processors.request",  
                "django.contrib.auth.context_processors.auth",  
                "django.contrib.messages.context_processors.messages",  
            ],
        },
    },
]

WSGI_APPLICATION = "Boilerplate.wsgi.application"  

# -----------------------------------------------------------------------------------------
#? DATABASE CONFIGURATION
# -----------------------------------------------------------------------------------------

#TODO: Change to your production database configuration (use PostgreSQL for production)
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",  # Change this to PostgreSQL or other databases
        "NAME": BASE_DIR / "db.sqlite3",  # Path to database file (for development)
    }
}

# -----------------------------------------------------------------------------------------
#? AUTHENTICATION CONFIGURATION
# -----------------------------------------------------------------------------------------

# Password validation settings (for securing user passwords)
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Custom user model (used for user-related features like authentication, profile, etc.)
AUTH_USER_MODEL = 'accounts.User'

# Password reset template
PASSWORD_RESET_EMAIL_HTML_TEMPLATE = 'password_reset_email.html'

# -----------------------------------------------------------------------------------------
# INTERNATIONALIZATION & TIMEZONE SETTINGS
# -----------------------------------------------------------------------------------------

LANGUAGE_CODE = "en-us"  # The default language for your project

TIME_ZONE = "UTC"  # Use UTC time for global support

USE_I18N = True  # Enable internationalization
USE_TZ = True  # Enable timezone support

# -----------------------------------------------------------------------------------------
#? STATIC & MEDIA FILES CONFIGURATION
# -----------------------------------------------------------------------------------------

# Static files management (e.g., CSS, JS)
STATIC_URL = "/static/"
STATICFILES_DIRS = [BASE_DIR / 'static',] # Add any directories where static files are located
STATIC_ROOT = BASE_DIR / "staticfiles"

# Media files management (e.g., images, user-uploaded files)
MEDIA_ROOT = BASE_DIR / 'media'  # Folder to store media files on the server
MEDIA_URL = "/media/" # URL to access media files

# -----------------------------------------------------------------------------------------
#? JAZZMIN CONFIGURATION (for Django Admin UI Customization)
# -----------------------------------------------------------------------------------------

JAZZMIN_SETTINGS = {
    # Title of the window (Will default to current_admin_site.site_title if absent or None)
    "site_title": "Djreact Admin",

    # Title on the login screen (19 chars max) (defaults to current_admin_site.site_header if absent or None)
    "site_header": "Djreact",

    # Title on the brand (19 chars max) (defaults to current_admin_site.site_header if absent or None)
    "site_brand": "Djreact",

    # Logo to use for your site, must be present in static files, used for brand on top left
    "site_logo": "djreact/img/logo.png",  # Replace this with your actual logo path

    # Logo to use for your site, must be present in static files, used for login form logo (defaults to site_logo)
    "login_logo": None,

    # Logo to use for login form in dark themes (defaults to login_logo)
    "login_logo_dark": None,

    # CSS classes that are applied to the logo above
    "site_logo_classes": "img-circle",

    # Relative path to a favicon for your site, will default to site_logo if absent (ideally 32x32 px)
    "site_icon": None,

    # Welcome text on the login screen
    "welcome_sign": "Welcome to Djreact Admin Panel",

    # Copyright on the footer
    "copyright": "Djreact Ltd",

    # List of model admins to search from the search bar, search bar omitted if excluded
    # If you want to use a single search field you don't need to use a list, you can use a simple string 
    "search_model": ["auth.User", "auth.Group"],

    # Field name on user model that contains avatar ImageField/URLField/Charfield or a callable that receives the user
    "user_avatar": None,

    ############
    # Top Menu #
    ############

    # Links to put along the top menu
    "topmenu_links": [

        # Url that gets reversed (Permissions can be added)
        {"name": "Home",  "url": "admin:index", "permissions": ["auth.view_user"]},

        # external url that opens in a new window (Permissions can be added)
        {"name": "Support", "url": "https://github.com/farridav/django-jazzmin/issues", "new_window": True},

        # model admin to link to (Permissions checked against model)
        {"model": "auth.User"},

        # App with dropdown menu to all its models pages (Permissions checked against models)
        {"app": "core"},
    ],

    #############
    # User Menu #
    #############

    # Additional links to include in the user menu on the top right ("app" url type is not allowed)
    "usermenu_links": [
        {"name": "Support", "url": "https://github.com/farridav/django-jazzmin/issues", "new_window": True},
        {"model": "auth.user"}
    ],

    #############
    # Side Menu #
    #############

    # Whether to display the side menu
    "show_sidebar": True,

    # Whether to aut expand the menu
    "navigation_expanded": True,

    # Hide these apps when generating side menu e.g (auth)
    "hide_apps": [],

    # Hide these models when generating side menu (e.g auth.user)
    "hide_models": [],

    # List of apps (and/or models) to base side menu ordering off of (does not need to contain all apps/models)
    "order_with_respect_to": ["auth", "Accounts", "Core"],  # Replace with your actual model names

    # Custom links to append to app groups, keyed on app name
    "custom_links": {
        "djreact": [{
            "name": "Create Feedback", 
            "url": "create_feedback",  # Replace with your actual URL
            "icon": "fas fa-comments",
            "permissions": ["djreact.view_model_name"]  # Replace with your actual permissions
        }]
    },

    # Custom icons for side menu apps/models
    "icons": {
        "auth": "fas fa-users-cog",
        "auth.user": "fas fa-user",
        "auth.Group": "fas fa-users",
    },

    # Icons that are used when one is not manually specified
    "default_icon_parents": "fas fa-chevron-circle-right",
    "default_icon_children": "fas fa-circle",

    #################
    # Related Modal #
    #################
    # Use modals instead of popups
    "related_modal_active": False,

    #############
    # UI Tweaks #
    #############
    # Relative paths to custom CSS/JS scripts (must be present in static files)
    "custom_css": "djreact/css/custom.css",  # Path to custom CSS file
    "custom_js": "djreact/js/custom.js",    # Path to custom JS file

    # Whether to link font from fonts.googleapis.com (use custom_css to supply font otherwise)
    "use_google_fonts_cdn": True,

    # Whether to show the UI customizer on the sidebar
    "show_ui_builder": False,

    ###############
    # Change view #
    ###############
    # Render out the change view as a single form, or in tabs, current options are
    # - single
    # - horizontal_tabs (default)
    # - vertical_tabs
    # - collapsible
    # - carousel
    "changeform_format": "horizontal_tabs",
    
    # override change forms on a per modeladmin basis
    "changeform_format_overrides": {"auth.user": "collapsible", "auth.group": "vertical_tabs"},

}


# -----------------------------------------------------------------------------------------
#? THIRD-PARTY CONFIGURATIONS
# -----------------------------------------------------------------------------------------

# Email settings (used for sending verification, password reset emails, etc.)
EMAIL_HOST = config('EMAIL_HOST', default='smtp.gmail.com')
EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
EMAIL_USE_TLS = True
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')  # Your email address
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')  # Your email password

# Redis configuration (for caching, session storage, etc.)
REDIS_HOST = config('REDIS_HOST', default='localhost')
REDIS_PORT = config('REDIS_PORT', default=6379, cast=int)
REDIS_DB = config('REDIS_DB', default=0, cast=int)

# REST_AUTH framework & JWT settings
REST_USE_JWT = True

# Custom REST-AUTH SETTING

ACCOUNT_USER_MODEL_USERNAME_FIELD = None  
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = 'email'  # Login with email
ACCOUNT_EMAIL_VERIFICATION = "none"  # no verification step, emails are auto-verified
ACCOUNT_EMAIL_REQUIRED = True 

SITE_ID = 1


# CORS (Cross-Origin Resource Sharing) settings to allow certain domains to access your APIs
CORS_ALLOW_ALL_ORIGINS = True  # Allow all domains (change for security in production)
CORS_ALLOWS_CREDENTIALS = True

# Simple JWT (JSON Web Tokens) settings for authentication
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
}

# Social account providers for OAuth (e.g., Google authentication)
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': config('SOCIAL_AUTH_GOOGLE_OAUTH2_KEY', default=''),
            'secret': config('SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET', default=''),
            'key': '',
        },
        "SCOPE": ["email", "profile"],
        "AUTH_PARAMS": {"access_type": "online"},
    }
}

# Django REST Framework settings (for configuring permissions, throttling, filters)
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        #'dj_rest_auth.authentication.JWTCookieAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': ['rest_framework.permissions.IsAuthenticated'],
    'DEFAULT_THROTTLE_CLASSES': ['rest_framework.throttling.AnonRateThrottle', 'rest_framework.throttling.UserRateThrottle'],
    'DEFAULT_THROTTLE_RATES': {'anon': '100/day', 'user': '1000/day'},
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
}

# STRIPE CONFIG
STRIPE_TEST_SECRET_KEY = config("STRIPE_TEST_SECRET_KEY", default='your_stripe_test_secret_key')
STRIPE_TEST_PUBLISHABLE_KEY = config("STRIPE_TEST_PUBLISHABLE", default='your_stripe_test_publishable_key')
